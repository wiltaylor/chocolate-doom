#![allow(non_snake_case)]
//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
//
// DESCRIPTION: Event handling.
//
// Events are asynchronous inputs generally generated by the game user.
// Events can be discarded if no responder claims them
//
use std::collections::VecDeque;
use libc::c_void;


#[repr(C)]
#[derive(Clone)]
pub struct event_t {
    data1 : i32,
    data2 : i32,
    data3 : i32,
    data4 : i32,
    data5 : i32
}

lazy_mut! {
    static mut events : VecDeque<event_t> = VecDeque::new();
}

#[no_mangle]
pub unsafe extern "C" fn D_PopEvent () -> *mut event_t {
    


    match events.pop_front() {
        Some(e) => return Box::into_raw(Box::new(e.clone())),
        None => return std::ptr::null_mut()
    }
}

#[no_mangle]
pub unsafe extern "C" fn D_PostEvent (ev : &event_t) {
    events.push_back(ev.clone());
}

